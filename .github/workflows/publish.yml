name: Build and Publish

# NOTE: build logic is duplicated here and in test_build.yml

# Run on the main branch for commits or version tags only
# These triggers are treated as an 'OR', so we also need to filter with 'if:' checks below
on:
  push:
    branches:     
      - master
    tags:        
      - v*    # run on version tags like v2.3.4

jobs:

  # Get the name of the branch we are running on
  # (apparently on a tag push there is no other way?)
  # https://stackoverflow.com/a/72959712
  check:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branch is $branch."


  build_wheels:
    needs: check

    # only run if on master branch, and commit contains '[ci publish]' or it is tagged with a v* tag like v2.3.4
    # if: "${{ needs.check.outputs.branch == 'master' && (contains(toJSON(github.event.commits.*.message), '[ci publish]') || startsWith(github.event.ref, 'refs/tags/v')) }}"

    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_arm64
          - runs-on: macos-latest
            cibw-arch: macosx_universal2
          - runs-on: windows-latest
            cibw-arch: win_amd64
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86

    name: Build wheels ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    env:
      CIBW_BUILD_VERBOSITY: 3
      CIBW_BEFORE_BUILD_LINUX : "yum remove -y cmake && python -m pip install cmake && yum install -y libX11-devel libXcursor-devel libXrandr-devel libXinerama-devel mesa-libGL-devel mesa-libGL libXi-devel freeglut-devel"

    steps:
      - env:
          OUTPUT1: ${{ needs.check.outputs.branch }}
          OUTPUT2: ${{ needs.check.outputs.name }}
        run: |
          echo "stored branch"
          echo "$OUTPUT1"
          echo "$OUTPUT2"

      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.16.2

      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_MACOS=CMAKE_OSX_ARCHITECTURES=\"$CMAKE_OSX_ARCHITECTURES\"" >> $GITHUB_ENV
      - name: Package source distribution
        if: runner.os == 'Linux'
        run: |
          python setup.py sdist -d wheelhouse --formats=gztar 

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      # Upload binaries to the github artifact store
      - uses: actions/upload-artifact@v2
        with:
          path: |
            ./wheelhouse/*.whl 
            ./wheelhouse/*.tar.gz 


  # Push the resulting binaries to pypi on a tag starting with 'v'
  upload_pypi:
    name: Upload release to PyPI
    needs: [check, build_wheels]

    # only run if on master branch, and commit contains '[ci publish]' or it is tagged with a v* tag like v2.3.4
    if: "${{ needs.check.outputs.branch == 'master' && (contains(toJSON(github.event.commits.*.message), '[ci publish]') || startsWith(github.event.ref, 'refs/tags/v')) }}"

    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/polyscope
    permissions: # we authenticate via PyPI's 'trusted publisher' workflow, this permission is required
      id-token: write
    steps:
      - name: Download built wheels artifact # downloads from the jobs storage from the previous step
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
          # To test: repository_url: https://test.pypi.org/legacy/

